stages:
    - lint
    - analysis
    - tag
    - publish

image: innobyte/magento2-gitlab-ci:7.3

lint:
    stage: lint
    tags:
        - ecommerce
    before_script:
        - mkdir tmp && mv composer.json tmp # create tmp folder to move composer.json in it
        - composer require magento/magento-coding-standard dealerdirect/phpcodesniffer-composer-installer --no-interaction # installing code sniffer and Magento2 coding standard
        - mv tmp/composer.json ./composer.json && rm -rf tmp # restore composer.json file in its previous location
    script:
        - ./vendor/bin/phpcs --ignore=*/vendor/* --standard=Magento2 . # running the code sniffer
    only:
        - master
        - merge_requests

sonarqube-check:
    stage: analysis
    tags:
        - ecommerce
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: [ "" ]
    before_script:
        - ''
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
        GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
        SONAR_TOKEN: "${SONAR_TOKEN}"
        SONAR_HOST_URL: "${SONAR_HOST_URL}"
        SONAR_PROJECT_ID: "${SONAR_PROJECT_ID}"
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    script:
        - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=$SONAR_PROJECT_ID -X
    only:
        - master
        - merge_requests

tagging:
    stage: tag
    tags:
        - ecommerce
    before_script:
        - git config --global user.name "${GITLAB_USER_NAME}"
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - version=$(cat composer.json | grep version | head -1 | awk -F':' '{ print $2 }' | sed 's/[version,:]//g' | sed 's/[\", ]//g')
    script:
        - git tag "v$version"
        - git push --tags https://group-access-token:${GROUP_ACCESS_TOKEN}@$CI_SERVER_HOST/$CI_PROJECT_PATH
    only:
        - master

packaging:
    image: curlimages/curl:latest
    stage: publish
    tags:
        - ecommerce
    variables:
        URL: "$CI_SERVER_PROTOCOL://$CI_SERVER_HOST:$CI_SERVER_PORT/api/v4/projects/$CI_PROJECT_ID/packages/composer?job_token=$CI_JOB_TOKEN"
    before_script:
        - version=$(cat composer.json | grep version | head -1 | awk -F':' '{ print $2 }' | sed 's/[version,:]//g' | sed 's/[\", ]//g')
    script:
        - tag=$(echo "tag=v$version")
        - insecure=$([ "$CI_SERVER_PROTOCOL" = "http" ] && echo "--insecure" || echo "")
        - response=$(curl -s -w "\n%{http_code}" $insecure --data $tag $URL)
        - code=$(echo "$response" | tail -n 1)
        - body=$(echo "$response" | head -n 1)
        # Output state information
        - if [ $code -eq 201 ]; then
            echo "Package created - Code $code - $body";
          else
            echo "Could not create package - Code $code - $body";
            exit 1;
          fi
    only:
        - master
